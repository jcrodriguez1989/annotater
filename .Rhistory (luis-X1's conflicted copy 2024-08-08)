pck_descs[which(stringr::str_detect(pck_descs$call, ".+load\\(")), ]
# if (any(grepl("p_load", pck_descs$call)) & any(grepl("libr|req", out_tb$call))) { # pacman and base calls
pacld <- pck_descs[which(stringr::str_detect(pck_descs$call, ".+load\\(")), ]
View(pacld)
View(pacld)
pacld$pkgnamesep <- paste0(pacld$package_name, ",")
pacld <- dplyr::mutate(dplyr::group_by(pacld, call), pkgnamesep = ifelse(dplyr::row_number() == dplyr::n(), gsub(",", "", .data$pkgnamesep), .data$pkgnamesep))
pacld$annotatedpac <- paste0(pacld$pkgnamesep, " # ", pacld$annotation, " v", pacld$version)
pacld <- dplyr::summarize(dplyr::group_by(pacld, call), pkgs = paste(.data$annotatedpac, collapse = "\n"))
pacld$ldcalls <- stringr::str_extract(pacld$call, ".+\\(")
pacld <- dplyr::mutate(pacld, annotpac = paste(.data$ldcalls, .data$pkgs, ")", sep = "\n"))
string_og <- stringi::stri_replace_all_fixed(
str = string_og, pattern = pacld$call,
replacement = pacld$annotpac, vectorize_all = FALSE
)
pck_descs <- pck_descs[which(!stringr::str_detect(pck_descs$call, ".+load\\(")), ]
View(pck_descs)
pck_descs <-  dplyr::mutate(pck_descs,annotated=dplyr::case_when(
stringr::str_detect(title,"not installed")~paste0(call, " # ", " ", annotation, " vNA"),
TRUE~ paste0(call, " # ", title, " ", annotation, " v", version)
))
View(pck_descs)
#return(
# align_annotations(
stringi::stri_replace_all_fixed(
str = string_og, pattern = out_tb$call,
replacement = pck_descs$annotated, vectorize_all = FALSE
)
#return(
# align_annotations(
stringi::stri_replace_all_fixed(
str = string_og, pattern = out_tb$call,
replacement = pck_descs$annotated, vectorize_all = FALSE
) %>% cat()
string_og <- c("library(palmerpenguins)\nrequire(ggplot2)\np_load(tidyr)\nlibrary(milanesee)")
string_og %>% annotate_repo_source()
string_og %>% annotate_repo_source() %>% cat
devtools::reload()
string_og %>% annotate_repo_source() %>% cat
string_og %>% annotate_repo_source() %>% cat
string_og %>% annotate_repo_source() %>% cat
string_og
string_og %>% cat
string_og %>% annotate_repo_source() %>% cat
string_og <- c("library(palmerpenguins)\nrequire(ggplot2)\library(tidyr)\nlibrary(milanesee)")
string_og <- c("library(palmerpenguins)\nrequire(ggplot2)\nlibrary(tidyr)\nlibrary(milanesee)")
string_og %>% annotate_repo_source() %>% cat
string_ogpca <- c("p_load(palmerpenguins)\np_load(ggplot2)\np_load(milanesee)")
string_ogpca %>% annotate_repo_source() %>% cat
string_ogMIX <- c("library(palmerpenguins)\nrequire(ggplot2)\np_load(tidyr)\nlibrary(milanesee)")
string_ogMIX %>% annotate_repo_source() %>% cat
string_og <- string_ogMIX
#annotate_repo_source <- function(string_og) {
out_tb <- match_pkg_names(string_og)
out_tb <- tibble::rowid_to_column(out_tb)
pck_descs <- suppressWarnings(purrr::map(out_tb$pkgname_clean,
utils::packageDescription,
fields = c("Repository", "RemoteType", "biocViews")
))
pck_descs <- purrr::map(pck_descs, as.list)
pck_descs <- tidyr::unnest(tibble::enframe(purrr::map(pck_descs, purrr::flatten_chr)), cols = c("value"))
pck_descs <- dplyr::rename(pck_descs, rowid = 1, repo = 2)
pck_descs <- dplyr::left_join(out_tb, pck_descs, by = "rowid")
pck_descs <- dplyr::mutate(pck_descs, repo = ifelse(stringr::str_detect(.data$repo, ","), "Bioconductor", .data$repo))
pck_descs <- dplyr::add_count(pck_descs, .data$package_name)
pck_descs <- dplyr::mutate(pck_descs, repo = dplyr::if_else(.data$n == 1, "none", .data$repo))
pck_descs <-
suppressMessages(dplyr::ungroup(dplyr::summarize(
dplyr::group_by(pck_descs,call,.data$package_name,.data$pkgname_clean),repo=dplyr::last(stats::na.omit(.data$repo)))))
pck_descs <- dplyr::mutate(pck_descs, user_repo = dplyr::case_when(
.data$repo ==
"CRAN" ~ "CRAN",
stringr::str_detect(.data$repo, "r-universe") ~ .data$repo,
.data$repo == "Bioconductor" ~ "Bioconductor",
.data$repo == "RSPM" ~ "Posit RPSM",
.data$repo == "none" ~ "not installed on this machine",
is.na(.data$repo) ~ "local install",
TRUE ~ repo_details(.data$pkgname_clean)
), annotation = dplyr::case_when(stringr::str_detect(
user_repo,
"(?<!/)/(?!/)"
) ~ paste0("[", .data$repo, "::", user_repo, "]"), TRUE ~ user_repo))
devtools::load_all()
pck_descs <- dplyr::mutate(pck_descs, user_repo = dplyr::case_when(
.data$repo ==
"CRAN" ~ "CRAN",
stringr::str_detect(.data$repo, "r-universe") ~ .data$repo,
.data$repo == "Bioconductor" ~ "Bioconductor",
.data$repo == "RSPM" ~ "Posit RPSM",
.data$repo == "none" ~ "not installed on this machine",
is.na(.data$repo) ~ "local install",
TRUE ~ repo_details(.data$pkgname_clean)
), annotation = dplyr::case_when(stringr::str_detect(
user_repo,
"(?<!/)/(?!/)"
) ~ paste0("[", .data$repo, "::", user_repo, "]"), TRUE ~ user_repo))
pck_descs <- dplyr::mutate(pck_descs, version = pkg_version(.data$pkgname_clean))
# if (any(grepl("p_load", pck_descs$call)) & any(grepl("libr|req", out_tb$call))) { # pacman and base calls
pacld <- pck_descs[which(stringr::str_detect(pck_descs$call, ".+load\\(")), ]
pacld$pkgnamesep <- paste0(pacld$package_name, ",")
pacld <- dplyr::mutate(dplyr::group_by(pacld, call), pkgnamesep = ifelse(dplyr::row_number() == dplyr::n(), gsub(",", "", .data$pkgnamesep), .data$pkgnamesep))
pacld$annotatedpac <- paste0(pacld$pkgnamesep, " # ", pacld$annotation, " v", pacld$version)
pacld <- dplyr::summarize(dplyr::group_by(pacld, call), pkgs = paste(.data$annotatedpac, collapse = "\n"))
pacld$ldcalls <- stringr::str_extract(pacld$call, ".+\\(")
pacld <- dplyr::mutate(pacld, annotpac = paste(.data$ldcalls, .data$pkgs, ")", sep = "\n"))
string_og <- stringi::stri_replace_all_fixed(
str = string_og, pattern = pacld$call,
replacement = pacld$annotpac, vectorize_all = FALSE
)
cat(string_og)
pck_descs <- pck_descs[which(!stringr::str_detect(pck_descs$call, ".+load\\(")), ]
pck_descs <-  dplyr::mutate(pck_descs,annotated=dplyr::case_when(
stringr::str_detect(title,"not installed")~paste0(call, " # ", " ", annotation, " vNA"),
TRUE~ paste0(call, " # ", title, " ", annotation, " v", version)
))
#pck_descs <-
dplyr::mutate(pck_descs,annotated=dplyr::case_when(
stringr::str_detect(title,"not installed")~paste0(call, " # ", " ", annotation, " vNA"),
TRUE~ paste0(call, " # ", title, " ", annotation, " v", version)
))
#pck_descs <-
dplyr::mutate(pck_descs,annotated=dplyr::case_when(
stringr::str_detect(annotation,"not installed")~paste0(call, " # ", " ", annotation, " vNA"),
TRUE~ paste0(call, " # ", " ", annotation, " v", version)
))
#pck_descs <-
dplyr::mutate(pck_descs,annotated=dplyr::case_when(
stringr::str_detect(annotation,"not installed")~paste0(call, " # ", " ", annotation, " vNA"),
TRUE~ paste0(call, " # ", " ", annotation, " v", version)
)) %>% View
pck_descs <-
dplyr::mutate(pck_descs,annotated=dplyr::case_when(
stringr::str_detect(annotation,"not installed")~paste0(call, " # ", " ", annotation, " vNA"),
TRUE~ paste0(call, " # ", " ", annotation, " v", version)
))
#return(
# align_annotations(
stringi::stri_replace_all_fixed(
str = string_og, pattern = out_tb$call,
replacement = pck_descs$annotated, vectorize_all = FALSE
)
#return(
# align_annotations(
stringi::stri_replace_all_fixed(
str = string_og, pattern = out_tb$call,
replacement = pck_descs$annotated, vectorize_all = FALSE
) %>% cat
#return(
# align_annotations(
stringi::stri_replace_all_fixed(
str = string_og, pattern = pck_descs$call,
replacement = pck_descs$annotated, vectorize_all = FALSE
)
#return(
# align_annotations(
stringi::stri_replace_all_fixed(
str = string_og, pattern = pck_descs$call,
replacement = pck_descs$annotated, vectorize_all = FALSE
) %>% cat
packageDescription("palmerpenguins")
devtools::reload()
devtools::install()
string_og <- c("library(palmerpenguins)\nrequire(ggplot2)\nlibrary(tidyr)\nlibrary(milanesee)")
string_ogMIX <- c("library(palmerpenguins)\nrequire(ggplot2)\np_load(tidyr)\nlibrary(milanesee)")
string_ogpca <- c("p_load(palmerpenguins)\np_load(ggplot2)\np_load(milanesee)")
string_og %>% annotate_repo_source() %>% cat
devtools::load_all()
string_og %>% annotate_repo_source() %>% cat
string_ogpca %>% annotate_repo_source() %>% cat
string_ogMIX %>% annotate_repo_source() %>% cat
string_og %>% annotate_repo_source() %>% cat
devtools::load_all()
string_og %>% annotate_repo_source() %>% cat
string_ogpca %>% annotate_repo_source() %>% cat
string_ogpca <- c("p_load(palmerpenguins)\np_load(ggplot2)\np_load(milanesee)")
string_og <- string_ogpca
#annotate_repo_source <- function(string_og) {
out_tb <- match_pkg_names(string_og)
out_tb <- tibble::rowid_to_column(out_tb)
pck_descs <- suppressWarnings(purrr::map(out_tb$pkgname_clean,
utils::packageDescription,
fields = c("Repository", "RemoteType", "biocViews")
))
pck_descs <- purrr::map(pck_descs, as.list)
pck_descs <- tidyr::unnest(tibble::enframe(purrr::map(pck_descs, purrr::flatten_chr)), cols = c("value"))
pck_descs <- dplyr::rename(pck_descs, rowid = 1, repo = 2)
pck_descs <- dplyr::left_join(out_tb, pck_descs, by = "rowid")
pck_descs <- dplyr::mutate(pck_descs, repo = ifelse(stringr::str_detect(.data$repo, ","), "Bioconductor", .data$repo))
pck_descs <- dplyr::add_count(pck_descs, .data$package_name)
pck_descs <- dplyr::mutate(pck_descs, repo = dplyr::if_else(.data$n == 1, "none", .data$repo))
pck_descs <-
suppressMessages(dplyr::ungroup(dplyr::summarize(
dplyr::group_by(pck_descs,call,.data$package_name,.data$pkgname_clean),repo=dplyr::last(stats::na.omit(.data$repo)))))
pck_descs <- dplyr::mutate(pck_descs, user_repo = dplyr::case_when(
.data$repo ==
"CRAN" ~ "CRAN",
stringr::str_detect(.data$repo, "r-universe") ~ .data$repo,
.data$repo == "Bioconductor" ~ "Bioconductor",
.data$repo == "RSPM" ~ "Posit RPSM",
.data$repo == "none" ~ "not installed on this machine",
is.na(.data$repo) ~ "local install",
TRUE ~ repo_details(.data$pkgname_clean)
), annotation = dplyr::case_when(stringr::str_detect(
user_repo,
"(?<!/)/(?!/)"
) ~ paste0("[", .data$repo, "::", user_repo, "]"), TRUE ~ user_repo))
pck_descs <- dplyr::mutate(pck_descs, version = pkg_version(.data$pkgname_clean))
pacld <- pck_descs[stringr::str_detect(out_tb$call, ".+load\\("), ]
View(pacld)
pacld$pkgnamesep <- paste0(pacld$package_name, ",")
pacld <- dplyr::mutate(dplyr::group_by(pacld, call), pkgnamesep = ifelse(dplyr::row_number() == dplyr::n(), gsub(",", "", .data$pkgnamesep), .data$pkgnamesep))
pacld <- pck_descs[stringr::str_detect(out_tb$call, ".+load\\("), ]
pacld$pkgnamesep <- paste0(pacld$package_name, ",")
#pacld <-
dplyr::mutate(dplyr::group_by(pacld, call), pkgnamesep = ifelse(dplyr::row_number() == dplyr::n(), gsub(",", "", .data$pkgnamesep), .data$pkgnamesep))
#pacld <-
dplyr::mutate(pkgnamesep = ifelse(dplyr::row_number() == dplyr::n(), gsub(",", "", .data$pkgnamesep), .data$pkgnamesep))
#pacld <-
dplyr::mutate(pkgnamesep = ifelse(dplyr::row_number() == dplyr::n(), gsub(",", "", .data$pkgnamesep), .data$pkgnamesep))
#pacld <-
dplyr::mutate(dplyr::group_by(pacld, call), pkgnamesep = ifelse(dplyr::row_number() == dplyr::n(), gsub(",", "", .data$pkgnamesep), .data$pkgnamesep))
pacld <- dplyr::mutate(dplyr::group_by(pacld, call), pkgnamesep = ifelse(dplyr::row_number() == dplyr::n(), gsub(",", "", .data$pkgnamesep), .data$pkgnamesep))
pacld$annotatedpac <- paste0(pacld$pkgnamesep, " # ", pacld$annotation, " v", pacld$version)
pacld <- dplyr::summarize(dplyr::group_by(pacld, call), pkgs = paste(.data$annotatedpac, collapse = "\n"))
pacld$ldcalls <- stringr::str_extract(pacld$call, ".+\\(")
pacld <- dplyr::mutate(pacld, annotpac = paste(.data$ldcalls, .data$pkgs, ")", sep = "\n"))
#return(
# align_annotations(
stringi::stri_replace_all_fixed(
str = string_og, pattern = pacld$call,
replacement = pacld$annotpac, vectorize_all = FALSE
))
#return(
# align_annotations(
stringi::stri_replace_all_fixed(
str = string_og, pattern = pacld$call,
replacement = pacld$annotpac, vectorize_all = FALSE
)
#return(
# align_annotations(
stringi::stri_replace_all_fixed(
str = string_og, pattern = pacld$call,
replacement = pacld$annotpac, vectorize_all = FALSE
) %>% cat
devtools::reload()
string_og <- c("library(palmerpenguins)\nrequire(ggplot2)\nlibrary(tidyr)\nlibrary(milanesee)")
string_ogMIX <- c("library(palmerpenguins)\nrequire(ggplot2)\np_load(tidyr)\nlibrary(milanesee)")
string_ogpca <- c("p_load(palmerpenguins)\np_load(ggplot2)\np_load(milanesee)")
string_og %>% annotate_repo_source() %>% cat
string_og <- c("library(palmerpenguins)\nrequire(ggplot2)\nlibrary(tidyr)\nlibrary(milanesee)")
string_og %>% annotate_repo_source() %>% cat
string_og
string_og <- c("library(palmerpenguins)\nrequire(ggplot2)\nlibrary(tidyr)\nlibrary(milanesee)")
string_og
string_og %>% cat
#annotate_repo_source <- function(string_og) {
out_tb <- match_pkg_names(string_og)
out_tb <- tibble::rowid_to_column(out_tb)
pck_descs <- suppressWarnings(purrr::map(out_tb$pkgname_clean,
utils::packageDescription,
fields = c("Repository", "RemoteType", "biocViews")
))
pck_descs <- purrr::map(pck_descs, as.list)
pck_descs <- tidyr::unnest(tibble::enframe(purrr::map(pck_descs, purrr::flatten_chr)), cols = c("value"))
pck_descs <- dplyr::rename(pck_descs, rowid = 1, repo = 2)
pck_descs <- dplyr::left_join(out_tb, pck_descs, by = "rowid")
pck_descs <- dplyr::mutate(pck_descs, repo = ifelse(stringr::str_detect(.data$repo, ","), "Bioconductor", .data$repo))
pck_descs <- dplyr::add_count(pck_descs, .data$package_name)
pck_descs <- dplyr::mutate(pck_descs, repo = dplyr::if_else(.data$n == 1, "none", .data$repo))
pck_descs <-
suppressMessages(dplyr::ungroup(dplyr::summarize(
dplyr::group_by(pck_descs,call,.data$package_name,.data$pkgname_clean),repo=dplyr::last(stats::na.omit(.data$repo)))))
pck_descs <- dplyr::mutate(pck_descs, user_repo = dplyr::case_when(
.data$repo ==
"CRAN" ~ "CRAN",
stringr::str_detect(.data$repo, "r-universe") ~ .data$repo,
.data$repo == "Bioconductor" ~ "Bioconductor",
.data$repo == "RSPM" ~ "Posit RPSM",
.data$repo == "none" ~ "not installed on this machine",
is.na(.data$repo) ~ "local install",
TRUE ~ repo_details(.data$pkgname_clean)
), annotation = dplyr::case_when(stringr::str_detect(
user_repo,
"(?<!/)/(?!/)"
) ~ paste0("[", .data$repo, "::", user_repo, "]"), TRUE ~ user_repo))
devtools::load_all()
out_tb <- tibble::rowid_to_column(out_tb)
pck_descs <- suppressWarnings(purrr::map(out_tb$pkgname_clean,
utils::packageDescription,
fields = c("Repository", "RemoteType", "biocViews")
))
pck_descs <- purrr::map(pck_descs, as.list)
pck_descs <- tidyr::unnest(tibble::enframe(purrr::map(pck_descs, purrr::flatten_chr)), cols = c("value"))
pck_descs <- dplyr::rename(pck_descs, rowid = 1, repo = 2)
pck_descs <- dplyr::left_join(out_tb, pck_descs, by = "rowid")
pck_descs <- dplyr::mutate(pck_descs, repo = ifelse(stringr::str_detect(.data$repo, ","), "Bioconductor", .data$repo))
pck_descs <- dplyr::add_count(pck_descs, .data$package_name)
pck_descs <- dplyr::mutate(pck_descs, repo = dplyr::if_else(.data$n == 1, "none", .data$repo))
pck_descs <-
suppressMessages(dplyr::ungroup(dplyr::summarize(
dplyr::group_by(pck_descs,call,.data$package_name,.data$pkgname_clean),repo=dplyr::last(stats::na.omit(.data$repo)))))
pck_descs <- dplyr::mutate(pck_descs, user_repo = dplyr::case_when(
.data$repo ==
"CRAN" ~ "CRAN",
stringr::str_detect(.data$repo, "r-universe") ~ .data$repo,
.data$repo == "Bioconductor" ~ "Bioconductor",
.data$repo == "RSPM" ~ "Posit RPSM",
.data$repo == "none" ~ "not installed on this machine",
is.na(.data$repo) ~ "local install",
TRUE ~ repo_details(.data$pkgname_clean)
), annotation = dplyr::case_when(stringr::str_detect(
user_repo,
"(?<!/)/(?!/)"
) ~ paste0("[", .data$repo, "::", user_repo, "]"), TRUE ~ user_repo))
pck_descs <- dplyr::mutate(pck_descs, version = pkg_version(.data$pkgname_clean))
View(pck_descs)
# build annotation
#if (all(!grepl("p_load", pck_descs$call))) { # no pacman calls
#  pck_descs <-
dplyr::mutate(pck_descs,annotated=dplyr::case_when(
stringr::str_detect(annotation,"not installed")~paste0(call, " # ", " ", annotation, " vNA"),
TRUE~ paste0(call, " # ", " ", annotation, " v", version)
))
# build annotation
#if (all(!grepl("p_load", pck_descs$call))) { # no pacman calls
pck_descs <-
dplyr::mutate(pck_descs,annotated=dplyr::case_when(
stringr::str_detect(annotation,"not installed")~paste0(call, " # ", " ", annotation, " vNA"),
TRUE~ paste0(call, " # ", " ", annotation, " v", version)
))
View(pck_descs)
#return(
align_annotations(stringi::stri_replace_all_fixed(
str = string_og, pattern = pck_descs$call,
replacement = pck_descs$annotated, vectorize_all = FALSE
))
string_og <- c("library(palmerpenguins)\nrequire(ggplot2)\nlibrary(tidyr)\nlibrary(milanesee)")
string_ogMIX <- c("library(palmerpenguins)\nrequire(ggplot2)\np_load(tidyr)\nlibrary(milanesee)")
string_ogpca <- c("p_load(palmerpenguins)\np_load(ggplot2)\np_load(milanesee)")
string_og %>% annotate_repo_source() %>% cat
string_og %>% annotate_repo_source() %>% cat
string_ogpca %>% annotate_repo_source() %>% cat
string_ogMIX %>% annotate_repo_source() %>% cat
string_og %>% annotate_repo_source() %>% cat
string_ogpca %>% annotate_repo_source() %>% cat
string_ogMIX %>% annotate_repo_source() %>% cat
devtools::install()
string_og <- c("library(palmerpenguins)\nrequire(ggplot2)\nlibrary(tidyr)\nlibrary(milanesee)")
string_og %>% annotate_repo_source()
devtools::load_all()
string_og %>% annotate_repo_source()
string_og %>% annotate_repo_source() %>% cat
string_og %>% annotate_repo_source() %>% align_annotations()
string_og %>% annotate_repo_source() %>% align_annotations() %>% cat
alaing <- c("library(moisiiin # CRAN\nlibrary(mo) # CRAN")
alaing %>% cat
align_annotations(alaing)
align_annotations(alaing) %>% cat
#align_annotations <- function(annot_string,
regex_ai = "(?!\\))(?!\\s)(?=\\#\\sCRAN\\sv|\\#\\sBiocon|\\#\\snot\\sinstal|\\#\\s\\[)"
sep_str = ""
annot_string <- alaing
cat(annot_string)
stringvec <- unlist(strsplit(annot_string, "\n"))
stringvec
match_position <- regexpr(regex_ai, stringvec,
perl = TRUE,
ignore.case = TRUE
)
match_position
#align_annotations <- function(annot_string,
regex_ai= "(?!\\))(?!\\s)(?=\\#\\sCRAN\\sv\\s|\\#\\sBioconductor\\s|\\#\\snot installed on|\\#\\s\\[)"
stringvec <- unlist(strsplit(annot_string, "\n"))
stringvec
match_position <- regexpr(regex_ai, stringvec,
perl = TRUE,
ignore.case = TRUE
)
match_position
match_position <- regexpr(regex_ai2, stringvec,
perl = TRUE,
ignore.case = TRUE
)
regex_ai2 = "(?!\\))(?!\\s)(?=\\#\\sCRAN\\sv|\\#\\sBiocon|\\#\\snot\\sinstal|\\#\\s\\[)"
match_position <- regexpr(regex_ai2, stringvec,
perl = TRUE,
ignore.case = TRUE
)
match_position
padding <- function(x) {
padspacing <- paste(rep.int(" ", max(x)), collapse = "")
substring(padspacing, 0L, x)
}
nspaces <- padding(max(match_position) - match_position)
for (i in seq_along(stringvec)) {
stringvec[i] <- sub(regex_ai, nspaces[i], stringvec[i],
perl = TRUE, ignore.case = TRUE
)
}
lines_out <- sub(regex_ai, sep_str, stringvec, perl = TRUE, ignore.case = TRUE)
paste0(lines_out, collapse = "\n")
paste0(lines_out, collapse = "\n") %>% cat
alaing <- c("library(moisiiin # CRAN v\nlibrary(mo) # CRAN v")
#align_annotations <- function(annot_string,
regex_ai= "(?!\\))(?!\\s)(?=\\#\\sCRAN\\sv\\s|\\#\\sBioconductor\\s|\\#\\snot installed on|\\#\\s\\[)"
regex_ai2 = "(?!\\))(?!\\s)(?=\\#\\sCRAN\\sv|\\#\\sBiocon|\\#\\snot\\sinstal|\\#\\s\\[)"
sep_str = ""
stringvec <- unlist(strsplit(annot_string, "\n"))
stringvec
match_position <- regexpr(regex_ai2, stringvec,
perl = TRUE,
ignore.case = TRUE
)
match_position
match_position <- regexpr(regex_ai1, stringvec,
perl = TRUE,
ignore.case = TRUE
)
match_position <- regexpr(regex_ai, stringvec,
perl = TRUE,
ignore.case = TRUE
)
match_position
padding <- function(x) {
padspacing <- paste(rep.int(" ", max(x)), collapse = "")
substring(padspacing, 0L, x)
}
nspaces <- padding(max(match_position) - match_position)
for (i in seq_along(stringvec)) {
stringvec[i] <- sub(regex_ai, nspaces[i], stringvec[i],
perl = TRUE, ignore.case = TRUE
)
}
lines_out <- sub(regex_ai, sep_str, stringvec, perl = TRUE, ignore.case = TRUE)
paste0(lines_out, collapse = "\n") %>% cat
alaing <- c("library(moisiiin # CRAN v1\nlibrary(mo) # CRAN v1")
alaing %>% cat
#align_annotations <- function(annot_string,
regex_ai = "(?!\\))(?!\\s)(?=\\#\\sCRAN\\sv|\\#\\sBiocon|\\#\\snot\\sinstal|\\#\\s\\[)"
sep_str = ""
annot_string
annot_string <- alaing
annot_string
stringvec <- unlist(strsplit(annot_string, "\n"))
stringvec
match_position <- regexpr(regex_ai, stringvec,
perl = TRUE,
ignore.case = TRUE
)
match_position
padding <- function(x) {
padspacing <- paste(rep.int(" ", max(x)), collapse = "")
substring(padspacing, 0L, x)
}
nspaces <- padding(max(match_position) - match_position)
for (i in seq_along(stringvec)) {
stringvec[i] <- sub(regex_ai, nspaces[i], stringvec[i],
perl = TRUE, ignore.case = TRUE
)
}
lines_out <- sub(regex_ai, sep_str, stringvec, perl = TRUE, ignore.case = TRUE)
paste0(lines_out, collapse = "\n") %>% cat
alaing <- c("library(moisiiin # CRAN v1\nlibrary(mo) # Biocon")
alaing %>% cat
alaing <- c("library(moisiiin # CRAN v1\nlibrary(mo) # Bioconductor v")
alaing %>% cat
align_annotations(alaing) %>% cat
alaing <- c("library(moisiiin # not installed on \nlibrary(mo) # Bioconductor v")
alaing %>% cat
align_annotations(alaing) %>% cat
alaing <- c("library(moisiiin # [github/luis] \nlibrary(mo) # Bioconductor v")
alaing %>% cat
align_annotations(alaing) %>% cat
devtools::reload()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::install()
devtools::check()
devtools::check_win_devel()
devtools::install()
devtools::submit_cran()
usethis::use_github_release()
usethis::use_dev_version()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()\
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::git_sitrep()
usethis::git_sitrep()
gh::gh_whoami()
usethis::git_sitrep()
gitcreds::gitcreds_get()
usethis::git_sitrep()
